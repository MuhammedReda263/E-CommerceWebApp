// <auto-generated />
using System;
using ECommerce.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250601225050_addSessionIdToOrderHeader")]
    partial class addSessionIdToOrderHeader
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Scifi"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "History"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Action"
                        });
                });

            modelBuilder.Entity("ECommerce.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PostalCode");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Tech City",
                            Name = "Tech Solutions",
                            PhoneNumber = "6669990000",
                            PostalCode = "12121",
                            State = "IL",
                            StreetAddress = "123 Tech St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Cloudville",
                            Name = "Data Innovations",
                            PhoneNumber = "5551234567",
                            PostalCode = "34343",
                            State = "CA",
                            StreetAddress = "456 Data Ave"
                        },
                        new
                        {
                            Id = 3,
                            City = "Digitalburg",
                            Name = "Web Crafters",
                            PhoneNumber = "8884442222",
                            PostalCode = "56565",
                            State = "NY",
                            StreetAddress = "789 Web Blvd"
                        },
                        new
                        {
                            Id = 4,
                            City = "Binarytown",
                            Name = "Code Masters",
                            PhoneNumber = "7773331111",
                            PostalCode = "78787",
                            State = "TX",
                            StreetAddress = "321 Algorithm Ln"
                        },
                        new
                        {
                            Id = 5,
                            City = "Artville",
                            Name = "Pixel Perfect",
                            PhoneNumber = "2225558888",
                            PostalCode = "90909",
                            State = "WA",
                            StreetAddress = "654 Design Rd"
                        });
                });

            modelBuilder.Entity("ECommerce.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ECommerce.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("PaymentDueDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("ECommerce.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Author = "Billy Spark",
                            CategoryId = 1,
                            Description = "Praesent vitae sodales libero...",
                            ISBN = "SWD9999001",
                            ImageUrl = "",
                            ListPrice = 99.0,
                            Price = 92.0,
                            Price100 = 80.0,
                            Price50 = 85.0,
                            Title = "Fortune of Time"
                        },
                        new
                        {
                            Id = 102,
                            Author = "Nancy Hoover",
                            CategoryId = 3,
                            Description = "Praesent vitae sodales libero...",
                            ISBN = "CAW777777701",
                            ImageUrl = "",
                            ListPrice = 40.0,
                            Price = 30.0,
                            Price100 = 20.0,
                            Price50 = 29.0,
                            Title = "Dark Skies"
                        },
                        new
                        {
                            Id = 103,
                            Author = "Julian Button",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero...",
                            ISBN = "RITO5555501",
                            ImageUrl = "",
                            ListPrice = 55.0,
                            Price = 50.0,
                            Price100 = 35.0,
                            Price50 = 48.0,
                            Title = "Vanish in the Sunset"
                        },
                        new
                        {
                            Id = 104,
                            Author = "Abby Muscles",
                            CategoryId = 1,
                            Description = "Praesent vitae sodales libero...",
                            ISBN = "WS3333333301",
                            ImageUrl = "",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 53.0,
                            Price50 = 60.0,
                            Title = "Cotton Candy"
                        },
                        new
                        {
                            Id = 105,
                            Author = "Ron Parker",
                            CategoryId = 2,
                            Description = "Praesent vitae sodales libero...",
                            ISBN = "SOTJ1111111101",
                            ImageUrl = "",
                            ListPrice = 60.0,
                            Price = 55.0,
                            Price100 = 55.0,
                            Price50 = 50.0,
                            Title = "Rock in the Ocean"
                        },
                        new
                        {
                            Id = 106,
                            Author = "Laura Phantom",
                            CategoryId = 3,
                            Description = "Praesent vitae sodales libero...",
                            ISBN = "FOT000000001",
                            ImageUrl = "",
                            ListPrice = 80.0,
                            Price = 75.0,
                            Price100 = 55.0,
                            Price50 = 70.0,
                            Title = "Leaves and Wonders"
                        },
                        new
                        {
                            Id = 51,
                            Author = "Ava Winters",
                            CategoryId = 1,
                            Description = "An intriguing tale that spans centuries.",
                            ISBN = "FOT000000051",
                            ImageUrl = "",
                            ListPrice = 90.0,
                            Price = 85.0,
                            Price100 = 70.0,
                            Price50 = 80.0,
                            Title = "Echoes of Time"
                        },
                        new
                        {
                            Id = 52,
                            Author = "Liam Frost",
                            CategoryId = 2,
                            Description = "A story of love and mystery.",
                            ISBN = "FOT000000052",
                            ImageUrl = "",
                            ListPrice = 85.0,
                            Price = 80.0,
                            Price100 = 65.0,
                            Price50 = 75.0,
                            Title = "Whispers in the Rain"
                        },
                        new
                        {
                            Id = 53,
                            Author = "Chloe River",
                            CategoryId = 3,
                            Description = "Darkness hides secrets in the woods.",
                            ISBN = "FOT000000053",
                            ImageUrl = "",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 50.0,
                            Price50 = 60.0,
                            Title = "Mystic Shadows"
                        },
                        new
                        {
                            Id = 54,
                            Author = "Noah Bright",
                            CategoryId = 2,
                            Description = "A hero rises when all hope fades.",
                            ISBN = "FOT000000054",
                            ImageUrl = "",
                            ListPrice = 75.0,
                            Price = 70.0,
                            Price100 = 55.0,
                            Price50 = 65.0,
                            Title = "Winds of Fate"
                        },
                        new
                        {
                            Id = 55,
                            Author = "Isla Dawn",
                            CategoryId = 1,
                            Description = "Adventures in a world of ice and light.",
                            ISBN = "FOT000000055",
                            ImageUrl = "",
                            ListPrice = 95.0,
                            Price = 90.0,
                            Price100 = 75.0,
                            Price50 = 85.0,
                            Title = "Crystal Horizon"
                        },
                        new
                        {
                            Id = 56,
                            Author = "Jack Orion",
                            CategoryId = 3,
                            Description = "When the sea speaks, only few can listen.",
                            ISBN = "FOT000000056",
                            ImageUrl = "",
                            ListPrice = 60.0,
                            Price = 55.0,
                            Price100 = 45.0,
                            Price50 = 50.0,
                            Title = "The Silent Sea"
                        },
                        new
                        {
                            Id = 57,
                            Author = "Nora Vale",
                            CategoryId = 2,
                            Description = "At the boundary of light and dark, truths are revealed.",
                            ISBN = "FOT000000057",
                            ImageUrl = "",
                            ListPrice = 78.0,
                            Price = 73.0,
                            Price100 = 58.0,
                            Price50 = 68.0,
                            Title = "Twilight's Edge"
                        },
                        new
                        {
                            Id = 58,
                            Author = "Leo Hart",
                            CategoryId = 1,
                            Description = "The world must burn before it can rise.",
                            ISBN = "FOT000000058",
                            ImageUrl = "",
                            ListPrice = 88.0,
                            Price = 83.0,
                            Price100 = 68.0,
                            Price50 = 78.0,
                            Title = "Fire and Ashes"
                        },
                        new
                        {
                            Id = 59,
                            Author = "Zara Phoenix",
                            CategoryId = 3,
                            Description = "Illusions are sometimes more real than the truth.",
                            ISBN = "FOT000000059",
                            ImageUrl = "",
                            ListPrice = 66.0,
                            Price = 61.0,
                            Price100 = 46.0,
                            Price50 = 56.0,
                            Title = "Moonlight Mirage"
                        },
                        new
                        {
                            Id = 60,
                            Author = "Mason Quinn",
                            CategoryId = 2,
                            Description = "A journey long abandoned is rediscovered.",
                            ISBN = "FOT000000060",
                            ImageUrl = "",
                            ListPrice = 72.0,
                            Price = 67.0,
                            Price100 = 52.0,
                            Price50 = 62.0,
                            Title = "The Forgotten Path"
                        },
                        new
                        {
                            Id = 61,
                            Author = "Ella Bloom",
                            CategoryId = 1,
                            Description = "Love and fate under a vast sky.",
                            ISBN = "FOT000000061",
                            ImageUrl = "",
                            ListPrice = 100.0,
                            Price = 95.0,
                            Price100 = 80.0,
                            Price50 = 90.0,
                            Title = "Beneath the Stars"
                        },
                        new
                        {
                            Id = 62,
                            Author = "Henry Vale",
                            CategoryId = 2,
                            Description = "Nature’s fury awakens ancient powers.",
                            ISBN = "FOT000000062",
                            ImageUrl = "",
                            ListPrice = 83.0,
                            Price = 78.0,
                            Price100 = 63.0,
                            Price50 = 73.0,
                            Title = "Storm's Call"
                        },
                        new
                        {
                            Id = 63,
                            Author = "Maya Thorn",
                            CategoryId = 3,
                            Description = "Every flower hides a secret story.",
                            ISBN = "FOT000000063",
                            ImageUrl = "",
                            ListPrice = 74.0,
                            Price = 69.0,
                            Price100 = 54.0,
                            Price50 = 64.0,
                            Title = "Garden of Secrets"
                        },
                        new
                        {
                            Id = 64,
                            Author = "Owen Reed",
                            CategoryId = 2,
                            Description = "The world above is not what it seems.",
                            ISBN = "FOT000000064",
                            ImageUrl = "",
                            ListPrice = 69.0,
                            Price = 64.0,
                            Price100 = 49.0,
                            Price50 = 59.0,
                            Title = "Ashen Skies"
                        },
                        new
                        {
                            Id = 65,
                            Author = "Sophie Blaze",
                            CategoryId = 1,
                            Description = "A dying flame can spark a revolution.",
                            ISBN = "FOT000000065",
                            ImageUrl = "",
                            ListPrice = 92.0,
                            Price = 87.0,
                            Price100 = 72.0,
                            Price50 = 82.0,
                            Title = "The Final Ember"
                        },
                        new
                        {
                            Id = 66,
                            Author = "Jasper Hale",
                            CategoryId = 3,
                            Description = "Two realities, one shattered mirror.",
                            ISBN = "FOT000000066",
                            ImageUrl = "",
                            ListPrice = 86.0,
                            Price = 81.0,
                            Price100 = 66.0,
                            Price50 = 76.0,
                            Title = "Mirror of Worlds"
                        },
                        new
                        {
                            Id = 67,
                            Author = "Aria Frost",
                            CategoryId = 1,
                            Description = "Cold lands hide warm hearts.",
                            ISBN = "FOT000000067",
                            ImageUrl = "",
                            ListPrice = 77.0,
                            Price = 72.0,
                            Price100 = 57.0,
                            Price50 = 67.0,
                            Title = "Veil of Ice"
                        },
                        new
                        {
                            Id = 68,
                            Author = "Eli Stone",
                            CategoryId = 2,
                            Description = "Time weaves destinies in strange ways.",
                            ISBN = "FOT000000068",
                            ImageUrl = "",
                            ListPrice = 84.0,
                            Price = 79.0,
                            Price100 = 64.0,
                            Price50 = 74.0,
                            Title = "Threads of Time"
                        },
                        new
                        {
                            Id = 69,
                            Author = "Luna Ray",
                            CategoryId = 3,
                            Description = "A desert of secrets and songs.",
                            ISBN = "FOT000000069",
                            ImageUrl = "",
                            ListPrice = 73.0,
                            Price = 68.0,
                            Price100 = 53.0,
                            Price50 = 63.0,
                            Title = "Song of the Sands"
                        },
                        new
                        {
                            Id = 70,
                            Author = "Kai Ember",
                            CategoryId = 1,
                            Description = "Hope rises with the sun.",
                            ISBN = "FOT000000070",
                            ImageUrl = "",
                            ListPrice = 82.0,
                            Price = 77.0,
                            Price100 = 62.0,
                            Price50 = 72.0,
                            Title = "Legacy of Dawn"
                        });
                });

            modelBuilder.Entity("ECommerce.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ECommerce.Models.OrderDetail", b =>
                {
                    b.HasOne("ECommerce.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Models.OrderHeader", b =>
                {
                    b.HasOne("ECommerce.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ECommerce.Models.Product", b =>
                {
                    b.HasOne("ECommerce.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerce.Models.ShoppingCart", b =>
                {
                    b.HasOne("ECommerce.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Models.ApplicationUser", b =>
                {
                    b.HasOne("ECommerce.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
